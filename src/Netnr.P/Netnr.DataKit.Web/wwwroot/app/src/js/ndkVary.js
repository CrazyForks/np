var ndkVary = {

    version: '0.1.0',
    theme: "light", //‰∏ªÈ¢ò ÂèØÈÄâ dark
    parameterConfig: {
        autoFilterDatabaseNumber: {
            label: "Êï∞ÊçÆÂ∫ìÂêçË∂ÖËøáËá™Âä®ËøáÊª§",
            type: "number",
            value: 40
        },
        selectDataLimit: {
            label: "Êü•ËØ¢Êï∞ÊçÆÈªòËÆ§ÈôêÂà∂Ë°åÊï∞",
            type: "number",
            value: 200
        },
        buildSqlWithQuote: {
            label: "ÁîüÊàê SQL Â∏¶Á¨¶Âè∑",
            type: "boolean",
            list: [
                { txt: "Â∏¶Á¨¶Âè∑", val: true },
                { txt: "‰∏çÂ∏¶", val: false }
            ],
            value: true
        },
        buildSqlWithComment: {
            label: "ÁîüÊàê SQL Â∏¶Ê≥®Èáä",
            type: "boolean",
            list: [
                { txt: "Â∏¶Ê≥®Èáä", val: true },
                { txt: "‰∏çÂ∏¶", val: false }
            ],
            value: true
        },
        editorFontSize: {
            label: "ÁºñËæëÂô®Â≠ó‰ΩìÂ§ßÂ∞è",
            type: "number",
            value: 18
        },
        editorLineNumbers: {
            label: "ÁºñËæëÂô®Ë°åÂè∑",
            type: "select",
            list: [
                { txt: "ÊòæÁ§∫", val: 'on' },
                { txt: "‰∏çÊòæÁ§∫", val: 'off' }
            ],
            value: 'on'
        },
        editorWordWrap: {
            label: "ÁºñËæëÂô®Êç¢Ë°å",
            type: "select",
            list: [
                { txt: "Ëá™Âä®Êç¢Ë°å", val: 'on' },
                { txt: "‰∏çÊç¢Ë°å", val: 'off' }
            ],
            value: 'on'
        },
        gridDataShowLength: {
            label: "Ë°®Ê†ºÊï∞ÊçÆÊòæÁ§∫Êà™Êñ≠",
            type: "number",
            value: 200
        }
    },

    //Êï∞ÊçÆÂ∫ìÁ±ªÂûã
    typeDB: ["SQLite", "MySQL", "MariaDB", "Oracle", "SQLServer", "PostgreSQL"],
    iconDB: type => ["üñ§", "üíö", "ü§é", "üíó", "üß°", "üíô"][ndkVary.typeDB.indexOf(type)], //ÂØπÂ∫îÂõæÊ†á

    typeEnv: ["Development", "Test", "Production"], //ÁéØÂ¢ÉÁ±ªÂûã
    colorEnv: env => {
        switch (env) {
            case "Test": return 'var(--sl-color-primary-600)';
            case "Production": return 'var(--sl-color-danger-600)';
        }
    },
    iconEnv: env => ["‚ö´", "üîµ", "üî¥"][ndkVary.typeEnv.indexOf(env)], //ÁéØÂ¢ÉÂõæÊ†á

    /**
     * svg ÂõæÊ†á
     * @param {*} name 
     * @param {*} style 
     * @returns 
     */
    iconSvg: (name, style) => `<svg class="${style || ""}" aria-hidden="true"><use xlink:href="#${name.toLowerCase()}"></use></svg>`,

    icons: {
        id: "üÜî",
        connType: "üíû",
        connOrder: "üö©",
        connGroup: "üë™",
        connEnv: "‚ö´",
        connConn: "üîó",
        connDatabase: "üéí",
        connTable: "üìö",
        connColumn: "üìô",
        loading: "üîÑ",
        ok: "üÜó",
        generate: "üé≤",
        ctrl: "üîß",
        copy: "üëØ",
        name: "üìõ",
        key: "üîë",
        edit: "‚úç",
        incr: "‚ûö",
        comment: "üìù",
        add: "‚ûï",
        remove: "‚ùå",
        success: "‚úî",
        info: "üîî",
        data: "üßÆ",
        cog: "‚öô",
        clipboard: "üìã",
        date: "üïì",
        cut: "‚úÇ",
    },
    /**
     * Ëé∑Âèñ icon
     * @param {any} icon
     */
    iconGrid: icon => `<span class="ag-icon ag-icon-${icon}"></span>`,

    //ËøûÊé•Ê®°Êùø
    resConnTemplate: {
        SQLite: "Data Source=<Êñá‰ª∂Áâ©ÁêÜË∑ØÂæÑÔºåÊàñÁΩëÁªúË∑ØÂæÑÔºåÂêéÂè∞Ëá™Âä®‰∏ãËΩΩÊñá‰ª∂>",
        MySQL: "Server=<IP>;Port=3306;Uid=<USER>;Pwd=<PWD>;Database=<DBNAME>;",
        MariaDB: "Server=<IP>;Port=3306;Uid=<USER>;Pwd=<PWD>;Database=<DBNAME>;",
        Oracle: "Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=<IP>)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=ORCL)));User Id=<USER>;Password=<PWD>;",
        SQLServer: "Server=<IP>,1433;User Id=<USER>;Password=<PWD>;Database=<DBNAME>;TrustServerCertificate=True;",
        PostgreSQL: "Server=<IP>;Port=5432;User Id=<USER>;Password=<PWD>;Database=<DBNAME>;"
    },
    //ËøûÊé•Á§∫‰æã
    resConnDemo: [
        { id: 10001, type: "SQLite", alias: "SQLite:netnrf", group: "demo", order: 1, env: "Test", conn: "Data Source=https://s1.netnr.eu.org/2020/05/22/2037505934.db" },
        { id: 10002, type: "MySQL", alias: "Heroku-JawsDB:ustf345c1n0wkaow", group: "demo", order: 2, env: "Test", conn: "Server=c8u4r7fp8i8qaniw.chr7pe7iynqr.eu-west-1.rds.amazonaws.com;Port=3306;Uid=fyxnmvubyl01t2k9;Pwd=ai7a4eg3c31scfcm;Database=ustf345c1n0wkaow;" },
        { id: 10003, type: "MariaDB", alias: "Heroku-JawsDB:gvx25hgtxzfr2lia", group: "demo", order: 3, env: "Test", conn: "Server=eporqep6b4b8ql12.chr7pe7iynqr.eu-west-1.rds.amazonaws.com;Port=3306;Uid=hydfd5qr08d3akt9;Pwd=tk53sieop5ua97pv;Database=gvx25hgtxzfr2lia;" },
        { id: 10004, type: "SQLServer", alias: "SOMEE-mssql:netnr-kit", group: "demo", order: 5, env: "Test", conn: "Server=198.37.116.112,1433;User Id=netnr_SQLLogin_1;Password=o2y9vrbjac;Database=netnr-kit;TrustServerCertificate=True;" },
        { id: 10005, type: "PostgreSQL", alias: "Heroku-pgsql:d7mhfq80unm96q", group: "demo", order: 6, env: "Test", conn: "Server=ec2-54-74-35-87.eu-west-1.compute.amazonaws.com;Port=5432;User Id=psphnovbbmsgtj;Password=7554b25380195aa5755a24c7f6e1f9f94f3de3dcef9c345c7e93ae8b07699ace;Database=d7mhfq80unm96q;SslMode=Require;Trust Server Certificate=true;" }
    ],
    //ÊúçÂä°
    resServer: [
        { host: "https://www.netnr.eu.org/api/v1", remark: "Âü∫‰∫é Heroku ÊûÑÂª∫" },
        { host: location.origin, remark: "ÂΩìÂâç" }
    ],

    apiServer: location.origin, //Êé•Âè£ÊúçÂä°
    apiHeaders: null, //Êé•Âè£Â§¥ÈÉ®ÂèÇÊï∞ÔºàÂ¶ÇÔºö{ Authorization: "token" }Ôºâ

    apiGetDatabaseName: "/DK/GetDatabaseName",
    apiGetDatabaseInfo: "/DK/GetDatabase",
    apiGetTable: "/DK/GetTable",
    apiGetColumn: "/DK/GetColumn",
    apiSetTableComment: "/DK/SetTableComment",
    apiSetColumnComment: "/DK/SetColumnComment",
    apiExecuteSql: "/DK/ExecuteSql",
    apiGetData: "/DK/GetData",
    apiGetDEI: "/DK/GetDEI",
};

export { ndkVary }